// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "elegant-tw-api/domain"

	mock "github.com/stretchr/testify/mock"
)

// SentenceUsecase is an autogenerated mock type for the SentenceUsecase type
type SentenceUsecase struct {
	mock.Mock
}

// GetRandomSentence provides a mock function with given fields: ctx
func (_m *SentenceUsecase) GetRandomSentence(ctx context.Context) (*domain.Sentence, error) {
	ret := _m.Called(ctx)

	var r0 *domain.Sentence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*domain.Sentence, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *domain.Sentence); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Sentence)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSentenceUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewSentenceUsecase creates a new instance of SentenceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSentenceUsecase(t mockConstructorTestingTNewSentenceUsecase) *SentenceUsecase {
	mock := &SentenceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
